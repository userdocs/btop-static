name: ci - linux docker build

on:
  workflow_dispatch:
  workflow_call:

env:
  REGISTRY_IMAGE_GHCR: ghcr.io/${{ github.repository }}
  REGISTRY_IMAGE_DOCKERHUB: ${{ github.repository }}
  SET_IMAGE_TAG: latest
  GH_TOKEN: ${{ github.token }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.gh_latest_tag.outputs.latest_tag }}
    strategy:
      fail-fast: false
      matrix:
        arch: [i686, x86_64, armv6, armv7l, aarch64, ppc64le, riscv64, s390x]
        include:
          - arch: x86_64
            platform: linux/amd64
          - arch: armv6
            platform: linux/arm/v6
          - arch: armv7l
            platform: linux/arm/v7
          - arch: aarch64
            platform: linux/arm64
          - arch: i686
            platform: linux/386
          - arch: ppc64le
            mcm: powerpc64le-linux-musl
            platform: linux/ppc64le
          - arch: riscv64
            platform: linux/riscv64
          - arch: s390x
            platform: linux/s390x

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch latest GitHub tag
        id: gh_latest_tag
        run: |
          latest_tag="$(gh release list --json tagName -L 1 -q '.[0].tagName')"
          printf '%s\n' "latest_tag=${latest_tag//+/-dev}" >> "$GITHUB_ENV"
          printf '%s\n' "latest_tag=${latest_tag//+/-dev}" >> "$GITHUB_OUTPUT"

      # Prepare environment variables
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          printf '%s\n' "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      # Generate Docker metadata
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE_GHCR }}
            ${{ env.REGISTRY_IMAGE_DOCKERHUB }}

      # Set up QEMU for multiarch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.arch }}-

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # Build and push Docker images
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE_GHCR }}:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            PLATFORM=linux/${{ matrix.platform }}
            ARCH=${{ matrix.mcm }}-linux-musl
            REPO=${{ github.repository }}

      # Export digest
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      # Upload digest
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Download digests
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Generate Docker metadata
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE_GHCR }}

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # Create and push manifest lists for ${{ env.SET_IMAGE_TAG }} tag
      - name: Create manifest list and push ${{ env.SET_IMAGE_TAG }}
        working-directory: /tmp/digests
        run: |
          ghcr_digests=$(for digest in *; do printf '${{ env.REGISTRY_IMAGE_GHCR }}@sha256:%s ' "$digest"; done)
          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE_GHCR }}:${{ env.SET_IMAGE_TAG }} $ghcr_digests

      # Create and push manifest lists for ${{ needs.build.outputs.latest_tag }} tag
      - name: Create manifest list and push (version)
        working-directory: /tmp/digests
        run: |
          ghcr_digests=$(for digest in *; do printf '${{ env.REGISTRY_IMAGE_GHCR }}@sha256:%s ' "$digest"; done)
          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE_GHCR }}:${{ needs.build.outputs.latest_tag }} $ghcr_digests

      # Inspect images
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE_GHCR }}:${{ env.SET_IMAGE_TAG }}
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE_GHCR }}:${{ needs.build.outputs.latest_tag }}
